package com.logic.bankwiser.bank_accounts;

import com.logic.bankwiser.cards.DebitCard;
import com.logic.bankwiser.loans.Loan;
import com.logic.bankwiser.transactions.Transaction;
import com.logic.bankwiser.utils.Input;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Objects;

/**
 * @author Kevin Collins
 * @author Mathias Hallander
 */
public class BankAccount {

    private final String BANK_ACCOUNT_ID;
    private String bankAccountName;
    private BigDecimal balance;
    private transient HashMap<String, Transaction> transactionHashMap;
    private transient HashMap<String, Loan> loanHashMap;
    private transient HashMap<String, DebitCard> cardHashMap;

    /**
     * Constructor for the BankAccount class.
     *
     * @param bankAccountID   The bank account's ID is generated by the system
     * @param bankAccountName The bank account's name is specified by the user
     * @throws Exception If invalid input is provided
     */
    public BankAccount(String bankAccountID, String bankAccountName) throws Exception {
        if (bankAccountName.length() <= 30) {
            this.BANK_ACCOUNT_ID = bankAccountID;
            this.bankAccountName = bankAccountName;
            this.balance = new BigDecimal("0.00");
            this.transactionHashMap = new HashMap<>();
            this.loanHashMap = new HashMap<>();
            this.cardHashMap = new HashMap<>();
        } else {
            throw new Exception("Cannot create a new account: The account name" +
                    bankAccountName + " is only " + bankAccountName.length() + " long.");
        }
    }

    public String getBankAccountID() {
        return BANK_ACCOUNT_ID;
    }

    public String getBankAccountName() {
        return bankAccountName;
    }

    public BigDecimal getBalance() {
        return balance;
    }

    public void flushMaps() {
        this.transactionHashMap = new HashMap<>();
        this.cardHashMap = new HashMap<>();
        this.loanHashMap = new HashMap<>();
    }

    public HashMap<String, Transaction> getTransactionMap() {
        return transactionHashMap;
    }

    public HashMap<String, Loan> getLoanMap() {
        return loanHashMap;
    }

    public HashMap<String, DebitCard> getCardMap() {
        return cardHashMap;
    }

    public DebitCard getCard(String cardNumber) {
        return cardHashMap.get(cardNumber);
    }

    public Loan getLoan(String loanID) {
        return loanHashMap.get(loanID);
    }

    public Transaction getTransaction(String transactionID) {
        return transactionHashMap.get(transactionID);
    }

    public int getNumOfTransactions() {
        return transactionHashMap.size();
    }

    public void setBankAccountName(String bankAccountName) {
        this.bankAccountName = bankAccountName;
    }

    /**
     * This method is used by the transaction controller to increase/decrease the bank account's balance.
     *
     * @param increaseBalance If true, increases balance; if false, decreases balance
     * @param amountOfMoney   The amount of money to be added or subtracted from balance.
     */
    public void processPaymentRequest(boolean increaseBalance, BigDecimal amountOfMoney) {
        if (increaseBalance) {
            balance = balance.add(amountOfMoney);
        } else {
            balance = balance.subtract(amountOfMoney);
        }
    }

    public void addTransaction(Transaction transaction) {
        transactionHashMap.put(transaction.getTransactionID(), transaction);
    }

    public void addLoan(Loan loan) {
        loanHashMap.put(loan.getLoanID(), loan);
    }

    public void addCard(DebitCard card) {
        cardHashMap.put(card.getCardNumber(), card);
    }

    @Override
    public String toString() {
        return "bankAccountID: " + this.BANK_ACCOUNT_ID + Input.EOL +
                "Name: " + this.bankAccountName + Input.EOL +
                "Balance: " + this.balance + Input.EOL +
                "Transactions: " + this.transactionHashMap.keySet() + Input.EOL +
                "Loans: " + this.loanHashMap.keySet() + Input.EOL +
                "Cards: " + this.cardHashMap.keySet();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        BankAccount that = (BankAccount) o;
        return BANK_ACCOUNT_ID.equals(that.BANK_ACCOUNT_ID);
    }

    @Override
    public int hashCode() {
        return Objects.hash(BANK_ACCOUNT_ID);
    }
}
