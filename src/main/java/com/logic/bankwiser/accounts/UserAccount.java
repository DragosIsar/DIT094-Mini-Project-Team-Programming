package com.logic.bankwiser.accounts;

import com.logic.bankwiser.utils.Input;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;
import java.util.regex.Pattern;

/**
 * @author Kevin Collins
 */

public class UserAccount {

    private final UUID userID;
    private String fullName;
    private String phoneNumber;
    private String address;
    private final String SOCIAL_SECURITY_NUMBER;
    private final String emailID;
    private String password;
    private final List<String> bankAccountList;

    /**
     * Constructor for the UserAccount class that handles input validation.
     * @param userID                User ID is generated by the system
     * @param fullName              Full name of the user
     * @param phoneNumber           Phone Number of the user
     * @param address               Address of the user
     * @param socialSecurityNum     Social security number of the user
     * @param emailID               Email address that is associated with the user account
     * @param password              Password that the user specific for this user account
     * @throws Exception            If invalid input is provided
     */
    public UserAccount(UUID userID, String fullName, String phoneNumber, String address,
                       String socialSecurityNum, String emailID, String password) throws Exception {
        // TODO This regex pattern is a simple one I wrote myself. Should we switch to a premade one? -KC
        String emailPattern = "^[a-zA-Z0-9.]+@[a-zA-Z]+.[a-zA-Z]+";

        if (fullName.isEmpty()) {
            throw new Exception("The name field shouldn't be left blank.");
        } else if (phoneNumber.isEmpty()) {
            throw new Exception("The phone number field shouldn't be left blank.");
        } else if (address.isEmpty()) {
            throw new Exception("The address field shouldn't be left blank.");
        } else if (socialSecurityNum.isEmpty()) {
            throw new Exception("The social security number field shouldn't be left blank.");
        } else if (emailID.isEmpty()) {
            throw new Exception("The email ID field shouldn't be left blank.");
        } else if (password.isEmpty()) {
            throw new Exception("The password field shouldn't be left blank.");
        } else {
            if (!Pattern.matches(emailPattern, emailID)) {
                throw new Exception("Email address is invalid.");
            } else {
                this.userID = userID;
                this.fullName = fullName;
                this.phoneNumber = phoneNumber;
                this.address = address;
                this.SOCIAL_SECURITY_NUMBER = socialSecurityNum;
                this.emailID = emailID;
                this.password = password;
                this.bankAccountList = new ArrayList<>();
            }
        }
    }

    public UUID getUserID() {
        return userID;
    }

    public String getFullName() {
        return fullName;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public String getAddress() {
        return address;
    }

    public String getSocialSecurityNum() {
        return SOCIAL_SECURITY_NUMBER;
    }

    public String getEmailID() {
        return emailID;
    }

    public String getPassword() {
        return password;
    }

    public List<String> getBankAccountList() {
        return bankAccountList;
    }

    public String setFullName(String fullName) {
        this.fullName = fullName;
        return "successfully changed name";
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public void addBankAccount(String bankAccountID) {
        bankAccountList.add(bankAccountID);
    }

    @Override
    public String toString() {
        return  "userID: " + userID + Input.EOL +
                "fullName: " + fullName + Input.EOL +
                "phoneNumber: " + phoneNumber + Input.EOL +
                "address: " + address + Input.EOL +
                "SOCIAL_SECURITY_NUMBER: " + SOCIAL_SECURITY_NUMBER + Input.EOL +
                "emailID: " + emailID + Input.EOL +
                "password: " + password + Input.EOL +
                "bankAccountList: " + bankAccountList;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        UserAccount that = (UserAccount) o;
        return userID.equals(that.userID) || SOCIAL_SECURITY_NUMBER.equals(that.SOCIAL_SECURITY_NUMBER);
    }

    @Override
    public int hashCode() {
        return Objects.hash(userID, SOCIAL_SECURITY_NUMBER);
    }
}
